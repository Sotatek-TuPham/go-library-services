basePath: /
definitions:
  model.Book:
    properties:
      author:
        type: string
      category:
        $ref: '#/definitions/model.Category'
      category_id:
        type: integer
      id:
        type: integer
      location:
        type: string
      status:
        $ref: '#/definitions/model.BookStatus'
      title:
        type: string
    type: object
  model.BookStatus:
    enum:
    - available
    - placed
    - taken
    type: string
    x-enum-varnames:
    - BookStatusAvailable
    - BookStatusPlaced
    - BookStatusTaken
  model.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.Receipt:
    type: object
  model.ReceiptStatus:
    enum:
    - pending
    - owned
    - returned
    type: string
    x-enum-varnames:
    - ReceiptStatusPending
    - ReceiptStatusOwned
    - ReceiptStatusReturned
host: localhost:3000
info:
  contact: {}
  description: This is a sample library API
  title: Library API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticate admin and return JWT token
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login endpoint
      tags:
      - auth
  /books:
    get:
      description: Get a list of all books with pagination and optional filters
      parameters:
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: pageSize
        type: integer
      - description: Filter by author
        in: query
        name: author
        type: string
      - description: Filter by category name
        in: query
        name: category
        type: string
      - description: Filter by book title
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Contains 'books' array, 'total' count, and 'pages' count
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with the input payload
      parameters:
      - description: Create book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Delete a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      description: Get a single book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Book'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update a book with the input payload
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a book
      tags:
      - books
  /books/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of a book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: New book status
        in: body
        name: status
        required: true
        schema:
          type: string
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update book status
      tags:
      - books
  /books/category/{categoryID}:
    get:
      description: Get a list of books in a specific category
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get books by category
      tags:
      - books
  /health:
    get:
      description: Check if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check endpoint
      tags:
      - health
  /receipts:
    get:
      description: Get all receipts with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all receipts
      tags:
      - receipts
    post:
      consumes:
      - application/json
      description: Create a new receipt with the input payload
      parameters:
      - description: Create receipt
        in: body
        name: receipt
        required: true
        schema:
          $ref: '#/definitions/model.Receipt'
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Receipt'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new receipt
      tags:
      - receipts
  /receipts/{id}:
    delete:
      description: Delete a receipt by its ID
      parameters:
      - description: Receipt ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a receipt
      tags:
      - receipts
    get:
      description: Get a single receipt by its ID
      parameters:
      - description: Receipt ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Receipt'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a receipt by ID
      tags:
      - receipts
  /receipts/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of an existing receipt
      parameters:
      - description: Receipt ID
        in: path
        name: id
        required: true
        type: integer
      - description: New receipt status
        in: body
        name: status
        required: true
        schema:
          type: string
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a receipt's status
      tags:
      - receipts
  /receipts/user/{user_id}:
    get:
      description: Get all receipts for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Receipt'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get receipts by user ID
      tags:
      - receipts
swagger: "2.0"
